# Some values in this values.yaml file are able to be templated using other values. 
# The default values under global for example.
# loadBalancerIpAddress under services other than 'ingress' are able to be templated
# By default (on services other than ingress) the loadBalancerIpAddress is set to
# "{{ .Values.ingress.loadBalancerIpAddress }}"

global:
  # These global values are used in various places throughout the values.yaml file. 
  # They can be overriden in the respective app's config, or can be set here.
  # They are currently used in the following places:
  # - duo.duoAdHost: '{{ .Values.global.baseDomain }}'
  # - duo.duoAdSearchDn: 'CN=Users,{{ .Values.global.ldapBaseDn }}'
  # - guacamole.ldapBindUser: CN=guacuser,CN=Users,{{ .Values.global.ldapDomain }}
  # - guacamole.properties: ldap-group-base-dn: {{ .Values.global.ldapBaseDn }}
  # - guacamole.properties: ldap-hostname: {{ .Values.global.ldapDomain }}
  # - guacamole.properties: ldap-search-bind-dn: CN={{ .Values.guacamole.ldapBindUser }},CN=Users,{{ .Values.global.ldapBaseDn }}
  # - guacamole.properties: ldap-user-base-dn: CN=Users,{{ .Values.global.ldapBaseDn }}
  # - guacamole.users.ldapBaseDn: '{{ .Values.global.ldapBaseDn }}'
  # - guacamole.users.autoConnections: domain: '{{ .Values.global.baseDomain }}'
  baseDomain: "" # testdomain.com
  ldapBaseDn: "" # DC=testdomain,DC=com

ingress:
  # ingress is used to serve http traffic to various backends.
  # It is used by guacamole, rdpgw (and authelia, used for the rdpgw.)
  # If ingress is disabled, guacamole and rdpgw will also be disabled.
  enabled: false
  # By default all services will share the ingress loadBalancerIpAddress.
  # This will limit src based acls for squid. 
  # This is configured under each service and can be overridden to use a 
  # dedicated ip address for each service.
  loadBalancerIpAddress: 1.2.3.4
  sharedIp: true

certManager:
  # certManager (https://cert-manager.io/docs/) is required for tls certificates.
  # TLS certificates are used by the ingress controller that serves traffic for guac. 
  # TLS certs are also used by rdpgw if that is enabled.
  # If certManager is disabled, guacamole and rdpgw will also be disabled.
  enabled: false
  secrets:
    route53SecretAccessKey: ""
  email: ""
  # ACME staging is used by default. To use for production, change the url to:
  # https://acme-v02.api.letsencrypt.org/directory
  letsEncryptServer: https://acme-staging-v02.api.letsencrypt.org/directory 
  route53Region: us-east-1
  route53HostedZoneId: ""
  route53AccessKeyID: ""

squid:
  enabled: false
  image: alphabet5/squid:latest
  replicas: 1
  restartPolicy: Always
  imagePullPolicy: Always
  loadBalancerIpAddress: "{{ .Values.ingress.loadBalancerIpAddress }}"
  # If squid.sharedIp is set to true, you cannot use src based acls in the squid config.
  # If the ip address is shared, the pod will only see communication from the IP address
  # of the node that it is running on.
  # If squid.sharedIp is set to false, externalTrafficPolicy will be set to Local.
  # See https://metallb.universe.tf/usage/ for more details.
  sharedIp: true
  squidPort: 3128
  # squid.whitelists will be mapped to files under /whitelists in the squid container.
  # These files can then be used within the squid.conf for building acls.
  whitelists:
    rockwell.txt: |
      .rockwellautomation.custhelp.com
      .rockwellautomation.com
    symantec.txt: |
      liveupdate.symantec.com
      liveupdate.symantecliveupdate.com
      ent-shasta.rrs.symantec.com
      tses.broadcom.com
      telemetry.broadcom.com
      ent-shasta-mr-clean.symantec.com
      central.ss.crsi.symantec.com
      central.nrsi.symantec.com
      central.avsi.symantec.com
      central.b6.crsi.symantec.com
      central.crsi.symantec.com
      stnd-avpg.crsi.symantec.com
      avs-avpg.crsi.symantec.com
      stnd-ipsg.crsi.symantec.com
      bash-avpg.crsi.symantec.com
      sp.cwfservice.net
      tus1gwynwapex01.symantec.com
      faults.qalabs.symantec.com
      faults.symantec.com
      linux-repo.us.securitycloud.symantec.com
    windows_updates.txt: |
      .windowsupdate.microsoft.com
      .update.microsoft.com
      .windowsupdate.com
      .download.windowsupdate.com
      download.microsoft.com
      wustat.windows.com
      ntservicepack.microsoft.com
      go.microsoft.com
      dl.delivery.mp.microsoft.com
  cfg: |
    #Setup logging
    logfile_rotate 0
    cache_log stdio:/dev/stdout
    access_log stdio:/dev/stdout
    cache_store_log stdio:/dev/stdout
    acl hasRequest has request
    access_log none !hasRequest

    #Set allowed ports
    acl SSL_ports port 443
    acl Safe_ports port 80          # http
    acl Safe_ports port 443         # https
    acl CONNECT method CONNECT

    # Block anything that is not ports 80/443
    http_access deny !Safe_ports
    http_access deny CONNECT !SSL_ports

    #Disable caching
    cache deny all

    #Support email for failure page.
    cache_mgr support@domain.local

    #Set source clients
    acl test_src src all

    #Set port number
    http_port 3128

    #Allow All
    http_access allow all
    http_access allow CONNECT all

dnsmasq:
  enabled: false
  image: alphabet5/dnsmasq:latest
  replicas: 1
  restartPolicy: Always
  imagePullPolicy: Always
  loadBalancerIpAddress: "{{ .Values.ingress.loadBalancerIpAddress }}"
  # dnsmasq.sharedIp needs to be set to true for both TCP and UDP dns queries to work.
  sharedIp: true
  # dnsmasq.args are extra arguments to pass to the dnsmasq service.
  # Example: --server=[/[<domain>]/[domain/]][<ipaddr>[#<port>]][@<interface>][@<source-ip>[#<port>]]
  # See the dnsmasq man page for more details.
  # The following example sets the default upstream server to 192.168.1.159
  # and the upstream server for requests to domain.com to 192.168.1.160. 
  args: []
    # Example:
    # - --server=192.168.1.159
    # - --server=/domain.com/192.168.1.160

smtp:
  enabled: false
  secrets:
    nextHopPassword: ""
  image: namshi/smtp:latest
  replicas: 1
  restartPolicy: Always
  imagePullPolicy: Always
  loadBalancerIpAddress: "{{ .Values.ingress.loadBalancerIpAddress }}"
  sharedIp: true
  smtpPort: 25
  relayNetworks: 0.0.0.0/0
  type: gmail # gmail or smarthost
  gmailAddress: "" #test@gmail.com
  smartHostAddress: ""
  smartHostPort: ""
  smartHostUser: ""

duo:
  enabled: false
  debug: false
  secrets:
    duoAdPassword: ""
    duoApiHostname: ""
    duoIntegrationKey: ""
    duoRadiusSecret: ""
    duoSecretKey: ""
  image: alphabet5/duoauthproxy:latest
  replicas: 1
  restartPolicy: Always
  imagePullPolicy: Always
  loadBalancerIpAddress: "{{ .Values.ingress.loadBalancerIpAddress }}"
  sharedIp: true
  duoAdHost: '{{ .Values.global.baseDomain }}'
  duoAdUser: DuoUser
  duoAdSearchDn: 'CN=Users,{{ .Values.global.ldapBaseDn }}'
  duoFailmode: secure

guacamole:
  enabled: false
  secrets:
    guacAdminPassword:
    mysqlPassword:
    mysqlRootPassword:
    ldapBindPassword:
  image: guacamole/guacamole:1.4.0
  replicas: 1
  restartPolicy: Always
  imagePullPolicy: Always
  dnsName:
  ldapBindUser: CN=guacuser,CN=Users,{{ .Values.global.ldapBaseDn }}
  debug: false
  properties: |
    enable-environment-properties: true
    ldap-encryption-method: none
    ldap-group-base-dn: {{ .Values.global.ldapBaseDn }}
    ldap-group-search-filter: (objectCategory=group)
    ldap-group-name-attribute: cn
    ldap-hostname: {{ .Values.global.baseDomain }}
    ldap-port: 389
    ldap-user-base-dn: CN=Users,{{ .Values.global.ldapBaseDn }}
    ldap-user-search-filter: (objectCategory=*)
    ldap-username-attribute: samAccountName
  guacd:
    image: guacamole/guacd:1.4.0
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: Always
  init:
    image: alphabet5/guacamole:latest
    imagePullPolicy: Always
  sql:
    enabled: true
    image: mariadb:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: Always
    mysqlUser: guacuser
    usersDatabase: guacdb
  users:
    enabled: true
    image: alphabet5/guacamole-users:latest
    replicas: 1
    restartPolicy: Always
    imagePullPolicy: Always
    debug: true
    # If guacamole.users.autoConnectionDns is set to true, 
    # the dns name of the computer will be used. If it is 
    # set to false, the ip address (resolved using 
    # guacamole.users.autoConnectionDnsResolver) will be used.
    autoConnectionDns: true 
    autoConnectionDnsResolver: ""
    # guacamole.users.guacAdminGroups should be set to the group name that 
    # contains users that you would like to have admin access to guacamole.
    guacAdminGroups: "" 
    ldapBaseDn: '{{ .Values.global.ldapBaseDn }}'
    ldapComputerFilter: (objectCategory=Computer)
    ldapGroupNameFromConnNameRegex: (.*?)\..+
    ldapGroupNameMod: {regex}
    refreshSpeed: 300
    manualOnly: false
    # manualConnections: |
    #   manual_connections:
    #     defaults:
    #       connection:
    #         protocol: 'rdp'
    #       parameters:
    #         console-audio: 'true'
    #         create-drive-path: 'true'
    #         drive-name: 'shared'
    #         drive-path: '/shared'
    #         enable-drive: 'true'
    #         enable-printing: 'true'
    #         ignore-cert: 'true'
    #         port: '3389'
    #         printer-name: 'RemotePrinter'
    #         security: 'nla'
    #         username: '${GUAC_USERNAME}'
    #         password: '${GUAC_PASSWORD}'
    #         domain: '{{ .Values.global.baseDomain }}'
    #     connections:
    #      - defaults: true
    #        connection:
    #          connection_name: 'TEST-CONNECTION.domain.com - 192.168.1.160'
    #        parameters:
    #          hostname: '192.168.1.160'
    #   #parameters section and specific paramters are only required if they are not the defaults.
    #   # If manual connections are specified, permissions are required to be set for all manual connections.
    #   # List all ldap groups under the connection_name for each manual connection. Any user in the ldap group
    #   # will have permission to connect with the specific connection.
    #   manual_permissions:
    #     "Domain Users":
    #       - 'TEST-CONNECTION.domain.com - 192.168.1.160'
    #     ThisIsATestGroup:
    #       - 'TEST-CONNECTION.domain.com - 192.168.1.160'
    autoConnections: |
      connection:
        protocol: 'rdp'
      parameters: # Connection parameters are defined here under 'Configuring Connections': https://guacamole.apache.org/doc/gug/configuring-guacamole.html
        console-audio: 'true'
        create-drive-path: 'true'
        drive-name: 'shared'
        drive-path: '/shared'
        enable-drive: 'true'
        enable-printing: 'true'
        ignore-cert: 'true'
        port: '3389'
        printer-name: 'RemotePrinter'
        security: 'nla'
        username: '${GUAC_USERNAME}'
        password: '${GUAC_PASSWORD}'
        domain: '{{ .Values.global.baseDomain }}'

elastic:
  enabled: false
  metricbeat:
    enabled: false
    image: docker.elastic.co/beats/metricbeat:8.1.1
    restartPolicy: Always
    imagePullPolicy: Always
    secrets: {}
    #   # These secrets are converted to all uppercase environment variables.
    #   # Secret 'secretName' can be used within the metricbeat config as ${SECRETNAME}
    #   username: 
    #   password:
    #   cloudId:
    #   cloudAuth:
    #   # elasticHost:
    #   # elasticUser:
    #   # elasticPassword:
    config: |
      # This commented out example is useing a self-hosted elasticsearch cluster.
      # By default, elastic cloud is used with cloudId and cloudAuth.
      #output.elasticsearch:
      #  hosts: ["${ELASTICHOST}"]
      #  username: ${ELASTICUSER}
      #  password: ${ELASTICPASSWORD}
      #  ssl:
      #    enabled: true
      #    ca_trusted_fingerprint: "b9a10bbe64ee9826abeda6546fc988c8bf798b41957c33d05db736716513dc9c"
      cloud:
        id: ${CLOUDID}
        auth: ${CLOUDAUTH}
      metricbeat.modules:
      - module: vsphere
        enabled: true
        metricsets: ["datastore", "host", "virtualmachine"]
        period: 10s
        hosts: ["https://ESXI01/sdk"]
        username: ${USERNAME}
        password: ${PASSWORD}
        # If insecure is true, don't verify the server's certificate chain
        insecure: true
        # Get custom fields when using virtualmachine metric set. Default false.
        # get_custom_fields: false
  filebeat:
    enabled: false
    image: docker.elastic.co/beats/filebeat:8.1.1
    restartPolicy: Always
    imagePullPolicy: Always
    loadBalancerIpAddress: "{{ .Values.ingress.loadBalancerIpAddress }}"
    udpPorts:
      - 9002
    tcpPorts: []
    secrets: {}
    #   # These secrets are converted to all uppercase environment variables.
    #   # Secret 'secretName' can be used within the metricbeat config as ${SECRETNAME}
    #   username: 
    #   password:
    #   cloudId:
    #   cloudAuth:
    #   # elasticHost:
    #   # elasticUser:
    #   # elasticPassword:
    config: |
      # This commented out example is useing a self-hosted elasticsearch cluster.
      # By default, elastic cloud is used with cloudId and cloudAuth.
      #output.elasticsearch:
      #  hosts: ["${ELASTICHOST}"]
      #  username: ${ELASTICUSER}
      #  password: ${ELASTICPASSWORD}
      #  ssl:
      #    enabled: true
      #    ca_trusted_fingerprint: "b9a10bbe64ee9826abeda6546fc988c8bf798b41957c33d05db736716513dc9c"
      cloud:
        id: ${CLOUDID}
        auth: ${CLOUDAUTH}
      filebeat.modules:
      - module: cisco
        ios:
          var.syslog_host: 0.0.0.0
          var.syslog_port: 9002
    
# rdpgw:
#   enabled: false
  # secrets:
  #   autheliaJwtSecret: 
  #   autheliaStorageEncryptionKey: 
  #   autheliaBackendLdapPassword: 
  #   autheliaIssuer: 
  #   autheliaHmac: 
  #   rdpwSessionKey:
  #   rdpgwSessionEncryptionKey:
  #   rdpgwOidcClientSecret:
  #   rdpgwPaaTokenSigningKey:
  #   rdpgwUserTokenEncryptionKey:
#   version: latest
#   replicas: 1
#   restartPolicy: Always
#   imagePullPolicy: Always
#   loadBalancerIpAddress: "{{ .Values.ingress.loadBalancerIpAddress }}"
#   sharedIp: true
#   # authenticationUrl:
#   # hosts:
#   #   dnsName: hostIp
#   #   i.e.
#   #   host1.rdpgw.demo.com: 192.168.1.2
